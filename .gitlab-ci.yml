variables:
  DOCKERFILE: Dockerfile
  DOCKER_IMAGE: asia.gcr.io/xuryaeligibility/xurya-calculator
  GCR_ENDPOINT: https://asia.gcr.io
  CHARTMUSEUM_ENDPOINT: https://chartmuseum.xurya.com
  HELMCHART_REPO: xurya
  HELMCHART_NAME: xurya-calculator-be-dev
  NAMESPACE_DEV: kahuripan
  GKE_CLUSTERS_DEV: xurya-phobos
  GKE_CLUSTERS_ZONE: asia-southeast1-a
  GCLOUD_PROJECT_ID: xuryaeligibility

stages:
  - sonarqube-check
  - sonarqube-vulnerability-report
  - build-push
  - prepare
  - release
  - deploy

sonarqube-check:
  stage: sonarqube-check
  only:
    - dev
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=xurya_xurya-calculator_0cfb680b-f188-4bae-8a10-48d0ad5139a1&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - dev
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check

prepare_job:
  stage: prepare # This stage must run before the release stage
  rules:
    - if: $CI_COMMIT_TAG
      when: never # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "TAG=v$(grep -i 'version' README.md | sed 's/[^ ]* //' | sed '2,$d' | tr -d ' ')" >> variables.env # and append to the variables.env file
  artifacts:
    reports:
      dotenv: variables.env # Use artifacts:reports:dotenv to expose the variables to other jobs

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_job
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "running release_job for $TAG"
  release:
    name: "Release $TAG"
    description: "Created using the release-cli $EXTRA_DESCRIPTION" # $EXTRA_DESCRIPTION and the $TAG
    tag_name: "$TAG" # variables must be defined elsewhere
    ref: "$CI_COMMIT_SHA" # in the pipeline. For example, in the

build-push-dev:
  stage: build-push
  only:
    - dev
  image: docker:git
  services:
    - docker:dind
  before_script:
    - echo $GOOGLE_CLOUD_ACCOUNT_VARIABLE | docker login -u _json_key --password-stdin $GCR_ENDPOINT
  script:
    - docker build -f $DOCKERFILE -t $DOCKER_IMAGE:$(date +%Y%m%d%H) -t $DOCKER_IMAGE:dev-latest  -t $DOCKER_IMAGE:v$(grep -i 'version' README.md | sed 's/[^ ]* //' | sed '2,$d' | tr -d ' ') .
    - docker push $DOCKER_IMAGE --all-tags

deploy-dev:
  stage: deploy
  only:
    - dev
  image: kiwigrid/gcloud-kubectl-helm:latest
  before_script:
    - helm repo add $HELMCHART_REPO --username $CHARTMUSEUM_USERNAME --password $CHARTMUSEUM_PASSWORD $CHARTMUSEUM_ENDPOINT
    - helm repo update
    - gcloud config set project $GCLOUD_PROJECT_ID
    - gcloud auth activate-service-account --key-file $GOOGLE_CLOUD_ACCOUNT_FILE
    - gcloud container clusters get-credentials $GKE_CLUSTERS_DEV --zone $GKE_CLUSTERS_ZONE
  script:
    - helm upgrade --install $HELMCHART_NAME $HELMCHART_REPO/$HELMCHART_NAME -n $NAMESPACE_DEV
